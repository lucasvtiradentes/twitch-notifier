!function(t,e){"object"==typeof exports&&"undefined"!=typeof module?module.exports=e():"function"==typeof define&&define.amd?define(e):(t="undefined"!=typeof globalThis?globalThis:t||self).TwitchNotifier=e()}(this,(function(){"use strict";return class{constructor(t){this.config=t,this.VERSION="0.0.1",this.APPNAME="twitch-notifier",this.GITHUB_REPOSITORY="lucasvtiradentes/twitch-notifier",this.ENVIRONMENT=this.detectEnvironment(),this.TODAY_DATE="",this.CURRENT_DATETIME="",this.SESSION_LOGS=[],this.USER_EMAIL="production"===this.ENVIRONMENT?this.getUserEmail():"",this.PROPERTY_DIVIDER=" | ",this.APPS_SCRIPTS_PROPERTIES={lastNotify:"LAST_NOTIFY"},this.ERRORS={productionOnly:"This method cannot run in non-production environments",mustSpecifyConfig:"You must specify the settings when starting the class",httpsError:"You provided an invalid ICS calendar link: "},this.validateConfigs(t),this.config=t,this.TODAY_DATE=this.getDateFixedByTimezone(this.config.settings.timeZoneCorrection).toISOString().split("T")[0],this.logger(`${this.APPNAME} is running at version ${this.VERSION} in ${this.ENVIRONMENT} environment`),this.logger(`check the docs for your version here: https://github.com/${this.GITHUB_REPOSITORY}/tree/v${this.VERSION}#readme`)}validateConfigs(t){if(!t)throw new Error(this.ERRORS.mustSpecifyConfig);[{objToCheck:t,requiredKeys:["twitch","settings"],name:"configs"},{objToCheck:t.twitch,requiredKeys:["channels","disabledHours","ignoredWords"],name:"configs.twitch"},{objToCheck:t.settings,requiredKeys:["timeZoneCorrection","checkFunction","minutesBetweenChecks"],name:"configs.settings"}].forEach((t=>{const{objToCheck:e,requiredKeys:i,name:s}=t;i.forEach((t=>{if(!e||!Object.keys(e).includes(t))throw new Error(`missing key in ${s}: ${t}`)}))}))}detectEnvironment(){return"undefined"==typeof Calendar?"development":"production"}logger(t){this.SESSION_LOGS.push(t),console.log(t)}getDateFixedByTimezone(t){const e=new Date;return e.setHours(e.getHours()+t),e}getUserEmail(){return Session.getActiveUser().getEmail()}check(){this.addMissingProperties();const t=this.getChannelsInformation(),e=this.getChannelsToNotify(t);e.length>0?(this.sendEmail(e),this.updateNotifiedChannels(e),this.logger(`notified about ${e.length} live streamers`)):(this.logger("no streamers went live recently"),this.logger(this.showNextChannelsToNotify(t)))}setup(){this.logger("installed looping"),this.addAppsScriptsTrigger(this.config.settings.checkFunction,this.config.settings.minutesBetweenChecks),this.addMissingProperties()}uninstall(){this.logger("uninstalled looping"),this.removeAppsScriptsTrigger(this.config.settings.checkFunction),this.removeAppsScriptProperty(this.APPS_SCRIPTS_PROPERTIES.lastNotify)}addMissingProperties(){this.getAppsScriptProperty(this.APPS_SCRIPTS_PROPERTIES.lastNotify)||this.updateAppsScriptProperty(this.APPS_SCRIPTS_PROPERTIES.lastNotify,"")}removeAppsScriptProperty(t){return PropertiesService.getScriptProperties().deleteProperty(t)}getAppsScriptProperty(t){return PropertiesService.getScriptProperties().getProperty(t)}updateAppsScriptProperty(t,e){return PropertiesService.getScriptProperties().setProperty(t,e)}addAppsScriptsTrigger(t,e){ScriptApp.getProjectTriggers().find((e=>e.getHandlerFunction()===t))&&this.removeAppsScriptsTrigger(t),ScriptApp.newTrigger(t).timeBased().everyMinutes(e).create()}removeAppsScriptsTrigger(t){const e=ScriptApp.getProjectTriggers().find((e=>e.getHandlerFunction()===t));e&&ScriptApp.deleteTrigger(e)}getDatefixedByTimezone(t){return t.setHours(t.getHours()+-3),t}getMinutesDiff(t,e){return Math.floor(Math.abs(Number(this.getDatefixedByTimezone(new Date(e)))-Number(this.getDatefixedByTimezone(new Date(t))))/1e3/60)}getTwitchLink(t){return`https://www.twitch.tv/${t}`}getTwitchStreamCompleteInfo(t){const e=UrlFetchApp.fetch(this.getTwitchLink(t)).getContentText();return this.extractLiveInformation(e,t)}extractLiveInformation(t,e){var i,s,r;let n=t.split('<script type="application/ld+json">')[1],o="";n&&(o=t.split('content="https://static-cdn')[1],o="https://static-cdn"+o.split('"')[0],n=n.split("<\/script>")[0],n=JSON.parse(n),n=n[0]);const a=n,h=a?this.getDatefixedByTimezone(new Date(a.uploadDate)).toISOString():"",p=this.getMinutesDiff(new Date(this.CURRENT_DATETIME),new Date(h));return{streamName:e,streamLink:this.getTwitchLink(e),streamImage:o,streamIsLive:null!==(i=null==a?void 0:a.publication.isLiveBroadcast)&&void 0!==i&&i,streamLiveDescription:null!==(s=null==a?void 0:a.description)&&void 0!==s?s:"",streamLivePreviewImage:null!==(r=null==a?void 0:a.thumbnailUrl[2])&&void 0!==r?r:"",streamLiveStartDatetime:h,streamLiveUptimeMinutes:p,streamLiveUptimeParsed:p>60?`${Math.trunc(p/60)} hours<br>${p-60*Math.trunc(p/60)} minutes`:!1===isNaN(p)?`${p} minutes`:""}}generateEmailContent(t){let e="";const i='style="width: 100%; text-align: center;"',s='style="border: 1px solid #333"',r=`<center>\n<table style="border: 1px solid #333; width: 90%">\n${`<tr ${i}">\n<th ${s} width="100px">channel</th><th ${s} width="100px">uptime</th><th ${s} width="auto">details</th>\n</tr>`}\n${t.map((t=>`<tr ${i}">\n${[`<div style="text-align: center;"><a href="${t.streamLink}"><img src="${t.streamImage}" width="80" style="border-radius: 50%"></a><br><a href="${t.streamLink}">${t.streamName}</a></div>`,`${t.streamLiveUptimeParsed}`,`<div><img src="${t.streamLivePreviewImage}" width="60%"><br><p>${t.streamLiveDescription}</p></div>`].map((t=>`<td ${s}>&nbsp;&nbsp;${t}</td>`)).join("\n")}\n</tr>`)).join("")}\n</table>\n</center>`;return e+="Hi,<br><br>\n",e=e+(1===t.length?`${t[0].streamName} is live:`:"the following channels are live:")+" <br><br>\n",e+=`${r}<br>\n`,e+='Regards, <br>your <a href="https://github.com/lucasvtiradentes/twitch-notifier#readme"><b>twitch notifier</b></a> bot',e}channelsToIgnoreIfTheyAreLive(){return this.getLastNotifiedChannels().filter((t=>this.getMinutesDiff(this.getDatefixedByTimezone(new Date),new Date(t[1]))<60*this.MIN_HOURS_BETWEEN_NOTIFICATIONS)).map((t=>t[0]))}getChannelsInformation(){return this.config.twitch.channels.map((t=>t[0])).map((t=>this.getTwitchStreamCompleteInfo(t)))}getChannelsToNotify(t){const e=this.getAppsScriptProperty(this.APPS_SCRIPTS_PROPERTIES.lastNotify),i=""===e?[]:e.split("\n").filter((t=>t.length>0)).map((t=>t.split(this.PROPERTY_DIVIDER)[0]));return t.filter((t=>!i.includes(t.streamName)||t.streamLiveUptimeMinutes<60)).filter((t=>t.streamIsLive)).filter((t=>!1===this.channelsToIgnoreIfTheyAreLive().includes(t.streamName)))}getLastNotifiedChannels(){return this.getAppsScriptProperty(this.APPS_SCRIPTS_PROPERTIES.lastNotify).split("\n").map((t=>t.split(this.PROPERTY_DIVIDER)))}updateNotifiedChannels(t){const e=[...this.getLastNotifiedChannels().filter((e=>!1===t.map((t=>t.streamName)).includes(e[0]))),...t.map((t=>[t.streamName,this.CURRENT_DATETIME]))].map((t=>t.join(this.PROPERTY_DIVIDER))).filter((t=>t.length>0)).join("\n");this.updateAppsScriptProperty(this.APPS_SCRIPTS_PROPERTIES.lastNotify,e)}showNextChannelsToNotify(t){const e=t.map((t=>[t.streamName,t.streamIsLive,t.streamLiveUptimeMinutes])).sort(((t,e)=>Number(e[1])-Number(t[1]))),i=Math.max(...e.map((t=>t[0].toString().length)));return e.map((t=>`${t[0]}${" ".repeat(i-t[0].toString().length)} - ${t[1]?"online ":"offline"}${isNaN(Number(t[2]))?"":" - "+Number(Number(t[2])/60).toFixed(2)+" hours"}`)).join("\n")}sendEmail(t){const e=`Twitch notifier - ${t[0].streamName} is live`,i=`Twitch notifier - ${t.length} channels live: ${t.map((t=>t.streamName)).slice(0,5).join(", ")}`;MailApp.sendEmail({to:this.USER_EMAIL,subject:1===t.length?e:i,htmlBody:this.generateEmailContent(t)})}}}));