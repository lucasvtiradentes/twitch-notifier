class GcalSync{constructor(e){this.VERSION="0.0.1",this.APPNAME="twitch-notifier",this.GITHUB_REPOSITORY="lucasvtiradentes/twitch-notifier",this.ENVIRONMENT=this.detectEnvironment(),this.TODAY_DATE="",this.USER_EMAIL="production"===this.ENVIRONMENT?this.getUserEmail():"",this.ERRORS={productionOnly:"This method cannot run in non-production environments",mustSpecifyConfig:"You must specify the settings when starting the class"},this.validateConfigs(e),this.config=e,this.TODAY_DATE=this.getDateFixedByTimezone(this.config.timeZoneCorrection).toISOString().split("T")[0],this.logger(`${this.APPNAME} is running at version ${this.VERSION} in ${this.ENVIRONMENT} environment`),this.logger(`check the docs for your version here: https://github.com/${this.GITHUB_REPOSITORY}/tree/v${this.VERSION}#readme`)}validateConfigs(e){if(!e)throw new Error(this.ERRORS.mustSpecifyConfig);[{objToCheck:e,requiredKeys:["timeZoneCorrection","streamers"],name:"configs"}].forEach((e=>{const{objToCheck:t,requiredKeys:i,name:n}=e;i.forEach((e=>{if(!t||!Object.keys(t).includes(e))throw new Error(`missing key in ${n}: ${e}`)}))}))}detectEnvironment(){return"undefined"==typeof Calendar?"development":"production"}logger(e){console.log(e)}getDateFixedByTimezone(e){const t=new Date;return t.setHours(t.getHours()+e),t}getGoogleSessionObject(){if("development"===this.ENVIRONMENT)throw new Error(this.ERRORS.productionOnly);return Session}getUserEmail(){return this.getGoogleSessionObject().getActiveUser().getEmail()}}