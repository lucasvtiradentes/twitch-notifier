class TwitchNotifier{constructor(t){this.VERSION="0.0.1",this.APPNAME="twitch-notifier",this.GITHUB_REPOSITORY="lucasvtiradentes/twitch-notifier",this.ENVIRONMENT=this.detectEnvironment(),this.TODAY_DATE="",this.USER_EMAIL="production"===this.ENVIRONMENT?this.getUserEmail():"",this.ERRORS={productionOnly:"This method cannot run in non-production environments",mustSpecifyConfig:"You must specify the settings when starting the class"},this.validateConfigs(t),this.config=t,this.TODAY_DATE=this.getDateFixedByTimezone(this.config.timeZoneCorrection).toISOString().split("T")[0],this.logger(`${this.APPNAME} is running at version ${this.VERSION} in ${this.ENVIRONMENT} environment`),this.logger(`check the docs for your version here: https://github.com/${this.GITHUB_REPOSITORY}/tree/v${this.VERSION}#readme`)}validateConfigs(t){if(!t)throw new Error(this.ERRORS.mustSpecifyConfig);[{objToCheck:t,requiredKeys:["timeZoneCorrection","streamers"],name:"configs"}].forEach((t=>{const{objToCheck:e,requiredKeys:i,name:n}=t;i.forEach((t=>{if(!e||!Object.keys(e).includes(t))throw new Error(`missing key in ${n}: ${t}`)}))}))}detectEnvironment(){return"undefined"==typeof Calendar?"development":"production"}logger(t){console.log(t)}getDateFixedByTimezone(t){const e=new Date;return e.setHours(e.getHours()+t),e}getGoogleSessionObject(){if("development"===this.ENVIRONMENT)throw new Error(this.ERRORS.productionOnly);return Session}getUserEmail(){return this.getGoogleSessionObject().getActiveUser().getEmail()}checkChannels(){Promise.all(this.config.streamers.map((t=>this.isTwitchStreamChannelLive(t)))).then((t=>{const e=this.config.streamers.filter(((e,i)=>t[i]));console.log(e),console.log(this.getDateFixedByTimezone(this.config.timeZoneCorrection).toISOString()),e.length>0&&this.sendEmail(e)}))}getTwitchLink(t){return`https://www.twitch.tv/${t}`}isTwitchStreamChannelLive(t){return new Promise(((e,i)=>{const n=this.getTwitchLink(t);if("production"===this.ENVIRONMENT){const t=UrlFetchApp.fetch(n);e(t.getContentText().includes("isLiveBroadcast"))}else fetch(n).then((t=>{t.text().then((t=>e(t.includes("isLiveBroadcast"))))}))}))}sendEmail(t){const e=`Oi, <br> <br>\n<ul>\n${t.map((t=>`<li>${t} tรก online: ${this.getTwitchLink(t)}</li>`)).join("<br>")}\n</ul>`;this.logger(`email sent to: ${this.USER_EMAIL}`),"production"===this.ENVIRONMENT&&MailApp.sendEmail({to:this.USER_EMAIL,subject:`streamers online: ${t.splice(0,4).join(", ")}`,htmlBody:e})}}