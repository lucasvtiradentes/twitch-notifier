!function(t,e){"object"==typeof exports&&"undefined"!=typeof module?module.exports=e():"function"==typeof define&&define.amd?define(e):(t="undefined"!=typeof globalThis?globalThis:t||self).TwitchNotifier=e()}(this,(function(){"use strict";return class{constructor(t){this.config=t,this.VERSION="1.1.3",this.APPNAME="twitch-notifier",this.GITHUB_REPOSITORY="lucasvtiradentes/twitch-notifier",this.ENVIRONMENT=this.detectEnvironment(),this.CURRENT_DATETIME="",this.SESSION_LOGS=[],this.USER_EMAIL=this.getUserEmail(),this.PROPERTY_DIVIDER=" | ",this.MIN_HOURS_BETWEEN_NOTIFICATIONS=2,this.APPS_SCRIPTS_PROPERTIES={lastNotify:"LAST_NOTIFY"},this.ERRORS={productionOnly:"This method cannot run in non-production environments",mustSpecifyConfig:"You must specify the settings when starting the class",httpsError:"You provided an invalid ICS calendar link: "},this.validateConfigs(t),this.config=t,this.CURRENT_DATETIME=this.getDateFixedByTimezone(new Date).toISOString(),this.logger(`${this.APPNAME} is running at version ${this.VERSION} in ${this.ENVIRONMENT} environment`),this.logger(`check the docs for your version here: https://github.com/${this.GITHUB_REPOSITORY}/tree/v${this.VERSION}#readme`)}validateConfigs(t){if(!t)throw new Error(this.ERRORS.mustSpecifyConfig);[{objToCheck:t,requiredKeys:["twitch","settings"],name:"configs"},{objToCheck:t.twitch,requiredKeys:["channels","ignoredWords","maximumUptimeMinutes"],name:"configs.twitch"},{objToCheck:t.settings,requiredKeys:["timeZoneCorrection","disabledHours","checkFunction","minutesBetweenChecks"],name:"configs.settings"}].forEach((t=>{const{objToCheck:e,requiredKeys:i,name:s}=t;i.forEach((t=>{if(!e||!Object.keys(e).includes(t))throw new Error(`missing key in ${s}: ${t}`)}))})),this.config.twitch.channels.forEach((t=>{if(t[1].ignoredWords&&t[1].searchedWords)throw new Error(`you must specify only one filter parameter in channel [${t[0]}]: ignoredWords OR searchedWords`)}))}detectEnvironment(){return"object"==typeof MailApp?"google_apps_script":"object"==typeof window?"browser":"nodejs"}logger(t){this.SESSION_LOGS.push(t),console.log(t)}getDateFixedByTimezone(t){const e=this.config.settings.timeZoneCorrection;return t.setHours(t.getHours()+e),t}getMinutesDiff(t,e){return Math.floor(Math.abs(Number(this.getDateFixedByTimezone(new Date(e)))-Number(this.getDateFixedByTimezone(new Date(t))))/1e3/60)}getScriptFunction(){if("google_apps_script"!==this.ENVIRONMENT)throw new Error(this.ERRORS.productionOnly);return ScriptApp}getPropertyFunction(){if("google_apps_script"!==this.ENVIRONMENT)throw new Error(this.ERRORS.productionOnly);return PropertiesService}getFetchFunction(){if("google_apps_script"!==this.ENVIRONMENT)throw new Error(this.ERRORS.productionOnly);return UrlFetchApp.fetch}getEmailFunction(){if("google_apps_script"!==this.ENVIRONMENT)throw new Error(this.ERRORS.productionOnly);return MailApp.sendEmail}getContent(t){return new Promise((e=>{require("https").get(t,(t=>{let i="";t.on("data",(t=>{i+=t})),t.on("end",(()=>{e(i)}))}))}))}async getPageContent(t){let e="";if("google_apps_script"===this.ENVIRONMENT){e=this.getFetchFunction()(t).getContentText()}else"nodejs"===this.ENVIRONMENT&&(e=await this.getContent(t));return e}generateEmailContent(t){let e="";const i='style="width: 100%; text-align: center;"',s='style="border: 1px solid #333"',r=`<center>\n<table style="border: 1px solid #333; width: 90%">\n${`<tr ${i}">\n<th ${s} width="100px">channel</th><th ${s} width="100px">uptime</th><th ${s} width="auto">details</th>\n</tr>`}\n${t.map((t=>`<tr ${i}">\n${[`<div style="text-align: center;"><a href="${t.streamLink}"><img src="${t.streamImage}" width="80" style="border-radius: 50%"></a><br><a href="${t.streamLink}">${t.streamName}</a></div>`,`${t.streamLiveUptimeParsed}`,`<div><img src="${t.streamLivePreviewImage}" width="60%"><br><p>${t.streamLiveDescription}</p></div>`].map((t=>`<td ${s}>&nbsp;&nbsp;${t}</td>`)).join("\n")}\n</tr>`)).join("")}\n</table>\n</center>`;return e+="Hi,<br><br>\n",e=e+(1===t.length?`${t[0].streamName} is live:`:"the following channels are live:")+" <br><br>\n",e+=`${r}<br>\n`,e+='Regards, <br>your <a href="https://github.com/lucasvtiradentes/twitch-notifier#readme"><b>twitch notifier</b></a> bot',e}getUserEmail(){return"google_apps_script"===this.ENVIRONMENT?Session.getActiveUser().getEmail():""}sendEmail(t){const e=`Twitch notifier - ${t[0].streamName} is live - ${t[0].streamLiveDescription}`,i=`Twitch notifier - ${t.length} channels live: ${t.map((t=>t.streamName)).slice(0,5).join(", ")}`;this.getEmailFunction()({to:this.USER_EMAIL,subject:1===t.length?e:i,htmlBody:this.generateEmailContent(t)})}addAppsScriptsTrigger(t,e){const i=this.getScriptFunction();i.getProjectTriggers().find((e=>e.getHandlerFunction()===t))&&this.removeAppsScriptsTrigger(t),i.newTrigger(t).timeBased().everyMinutes(e).create()}removeAppsScriptsTrigger(t){const e=this.getScriptFunction(),i=e.getProjectTriggers().find((e=>e.getHandlerFunction()===t));if(i)return e.deleteTrigger(i),!0}removeAppsScriptProperty(t){if(this.getAppsScriptProperty(t))return this.getPropertyFunction().getScriptProperties().deleteProperty(t),!0}getAppsScriptProperty(t){return this.getPropertyFunction().getScriptProperties().getProperty(t)}updateAppsScriptProperty(t,e){return this.getPropertyFunction().getScriptProperties().setProperty(t,e)}addMissingProperties(){this.getAppsScriptProperty(this.APPS_SCRIPTS_PROPERTIES.lastNotify)||this.updateAppsScriptProperty(this.APPS_SCRIPTS_PROPERTIES.lastNotify,"")}getTwitchLink(t){return`https://www.twitch.tv/${t}`}async getTwitchStreamCompleteInfo(t){const e=await this.getPageContent(this.getTwitchLink(t));return this.extractLiveInformation(e,t)}extractLiveInformation(t,e){var i,s,r;let n=t.split('<script type="application/ld+json">')[1],o="";n&&(o=t.split('content="https://static-cdn')[1],o="https://static-cdn"+o.split('"')[0],n=n.split("<\/script>")[0],n=JSON.parse(n),n=n[0]);const a=n,h=a?this.getDateFixedByTimezone(new Date(a.uploadDate)).toISOString():"",c=this.getMinutesDiff(new Date(this.CURRENT_DATETIME),new Date(h));return{streamName:e,streamLink:this.getTwitchLink(e),streamImage:o,streamIsLive:null!==(i=null==a?void 0:a.publication.isLiveBroadcast)&&void 0!==i&&i,streamLiveDescription:null!==(s=null==a?void 0:a.description)&&void 0!==s?s:"",streamLivePreviewImage:null!==(r=null==a?void 0:a.thumbnailUrl[2])&&void 0!==r?r:"",streamLiveStartDatetime:h,streamLiveUptimeMinutes:c,streamLiveUptimeParsed:c>60?`${Math.trunc(c/60)} hours<br>${c-60*Math.trunc(c/60)} minutes`:!1===isNaN(c)?`${c} minutes`:""}}updateNotifiedChannels(t){const e=[...this.getLastNotifiedChannels().filter((e=>!1===t.map((t=>t.streamName)).includes(e[0]))),...t.map((t=>[t.streamName,this.CURRENT_DATETIME]))].map((t=>t.join(this.PROPERTY_DIVIDER))).filter((t=>t.length>0)).join("\n");this.updateAppsScriptProperty(this.APPS_SCRIPTS_PROPERTIES.lastNotify,e)}showNextChannelsToNotify(t){const e=t.map((t=>[t.streamName,t.streamIsLive,t.streamLiveUptimeMinutes,t.reasonToNotNotify.join(", ")])).sort(((t,e)=>Number(e[1])-Number(t[1]))),i=Math.max(...e.map((t=>t[0].toString().length)));return e.map((t=>`${t[0]}${" ".repeat(i-t[0].toString().length)} - ${t[1]?"online ":"offline"}${isNaN(Number(t[2]))?"":" - "+String(Number(Number(t[2])/60).toFixed(2)).padStart(5,"0")+" hours"}${isNaN(Number(t[2]))?"":` - ${t[3]}`}`)).join("\n")}getLastNotifiedChannels(){if("google_apps_script"!==this.ENVIRONMENT)return[];return this.getAppsScriptProperty(this.APPS_SCRIPTS_PROPERTIES.lastNotify).split("\n").filter((t=>t.length>0)).map((t=>t.split(this.PROPERTY_DIVIDER)))}addReasonNotToNotifyIntoStreamersData(t){const e=this.getLastNotifiedChannels(),i=this.config.twitch.ignoredWords.map((t=>t.toLowerCase()));return t.map((t=>{const s=[];t.streamIsLive||s.push("offline");t.streamLiveUptimeMinutes<this.config.twitch.maximumUptimeMinutes||s.push("not_started_recently");0!==i.length&&i.some((e=>t.streamLiveDescription.toLowerCase().search(e)>-1))&&s.push("contain_global_ignored_words");const r=this.config.twitch.channels.find((e=>e[0]===t.streamName)),n=r[1].ignoredWords?r[1].ignoredWords.map((t=>t.toLowerCase())):[];!!r[1].ignoredWords&&n.some((e=>t.streamLiveDescription.toLowerCase().search(e)>-1))&&s.push("contain_specific_ignored_words");const o=r[1].searchedWords?r[1].searchedWords.map((t=>t.toLowerCase())):[];!r[1].searchedWords||o.some((e=>t.streamLiveDescription.toLowerCase().search(e)>-1))||s.push("does_not_contain_searched_words");const a=e.filter((e=>e[0]===t.streamName)),h=a[0]?new Date(a[0][1]):new Date;return 0!==a.length&&this.getMinutesDiff(this.getDateFixedByTimezone(new Date),h)<60*this.MIN_HOURS_BETWEEN_NOTIFICATIONS&&s.push("notified_recently"),Object.assign(Object.assign({},t),{reasonToNotNotify:s})}))}async getTwichStreamersData(){return await Promise.all(this.config.twitch.channels.map((t=>t[0])).map((async t=>await this.getTwitchStreamCompleteInfo(t))))}async check(){const t=Number(this.CURRENT_DATETIME.split("T")[1].split(":")[0]);if(this.config.settings.disabledHours.includes(t))return void this.logger(`skipping run since it [${t}] is a disable hour`);this.addMissingProperties();const e=await this.getTwichStreamersData(),i=this.addReasonNotToNotifyIntoStreamersData(e),s=i.filter((t=>0===t.reasonToNotNotify.length));s.length>0?(this.sendEmail(s),this.updateNotifiedChannels(s),this.logger(`notified about ${s.length} live streamers`)):(this.logger("no streamers went live recently"),this.logger(this.showNextChannelsToNotify(i)))}install(){this.addAppsScriptsTrigger(this.config.settings.checkFunction,this.config.settings.minutesBetweenChecks),this.addMissingProperties(),this.logger("installed looping")}uninstall(){this.removeAppsScriptProperty(this.APPS_SCRIPTS_PROPERTIES.lastNotify);this.removeAppsScriptsTrigger(this.config.settings.checkFunction)&&this.logger("uninstalled looping")}}}));